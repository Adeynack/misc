openapi: 3.0.2
info:
  title: Person API
  version: 1.0.0
paths:

  '/persons':
    get:
      responses:
        200:
          description: List of person.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person_Index'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person_Create'
      responses:
        201:
          description: Person created.
        422:
          description: Validation error.
          
  '/persons/{person-slug}':
    parameters:
      - name: person-slug
        in: path
        required: true
        schema:
          type: string
    get:
      responses:
        200:
          description: Get a specific person.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person_Show'
        404:
          description: Person not found.
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person_Props'
      responses:
        200:
          description: Modifications saved, image returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person_Show'
        404:
          description: Person not found.
        422:
          description: Validation error.

components:

  schemas:

    UUID:
      description: A unique identifier in the UUID format.
      readOnly: true
      type: string
      format: UUID
      example: '76a9f945-ca75-4354-9904-cc4625af1947'

    Translated:
      description: |-
        A translated text under the form of a JSON object
        where the keys are the language code and their value
        is a the translated string.
      additionalProperties:
        type: string
      example:
        en: Hello!
        fr: Bonjour!
        de: Guten Tag!

    WithID:
      description: |-
        A resource with a UUID as its unique identifier.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
      required:
        - id
    
    WithSlug:
      description: |-
        A resource identifiable by a human-readable
        textual `slug`.
        When getting a resource, the slug is required (provided
        by the server).
      properties:
        slug:
          type: string
          example: papa-giorgio
      required:
        - slug

    WithSlugOpt:
      description: |-
        A resource with an optional slug.
        When creating up updating a resource, it's possible
        to provide a slug that the caller would have decide
        in advance. Needs to be unique on the server for the
        creation/update to succeed.
      properties:
        slug:
          type: string
  
    Person_Props:
      description: |-
        All properties of a person, all optional.
        Without the ID.
        Used for `PATCH`.
      properties:
        first_name:
          type: string
          example: Georg
        last_name:
          type: string
          example: Steiner
        birthdate:
          type: string
          format: date
          example: '1975-07-23'
        description:
          type: string
          example: Ein netter Typ!
        original_name:
          description: Name of the person in its original language(s).
          allOf:
            - $ref: '#/components/schemas/Translated'
          example:
            en: George
            fr: Georges
            de: Jörg
            cz: Jiří
            ru: Юрий

    Person_Base:
      description: |-
        Pulls all properties from `PersonPatch`, defining
        some as required.
      allOf:
        - $ref: '#/components/schemas/Person_Props'
      required:
        - firstName
        - lastName
        - birthdate

    Person_Create:
      description: |-
        The `write` version of the resource.
        Providing the `slug` is optional. If not
        provided, the server creates one automatically.
        Used for `POST`.
      allOf:
        - $ref: '#/components/schemas/WithSlugOpt'
        - $ref: '#/components/schemas/Person_Base'
      
    Person_Show:
      description: |-
        The `read` version of the resource.
        The `id` and the `slug` are mandatory in the
        response from the server.
        Used for `GET`.
      allOf:
        - $ref: '#/components/schemas/WithID'
        - $ref: '#/components/schemas/WithSlug'
        - $ref: '#/components/schemas/Person_Base'

    Person_Index:
      description: |-
        An object containing a list of person.
      properties:
        data:
          type: array              
          items:
            $ref: '#/components/schemas/Person_Partial'
    
    Person_Partial:
      description: |-
        A person as described as part of a list.
      allOf:
        - $ref: '#/components/schemas/WithID'
        - $ref: '#/components/schemas/WithSlug'
        - properties:
            first_name:
              type: string
              example: Georg
            last_name:
              type: string
              example: Steiner
          required:
            - first_name
            - last_name
